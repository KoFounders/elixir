name: Elixir test project

on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]
  pull_request_target:
    branches:
      - '**'
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  PROJECT_ID: ${{ secrets.ANTI_GCP_PROJECT_ID }}
  GKE_CLUSTER: autopilot-cluster-1
  GKE_ZONE:  europe-north1

permissions:
  contents: 'read'
  id-token: 'write'

jobs:
  compile-and-push:
    name: Compile, Package and Upload
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - id: 'auth'
        name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@v0.4.0'
        with:
          token_format: 'access_token'
          workload_identity_provider: 'projects/348769354616/locations/global/workloadIdentityPools/antimon-pool2/providers/antimon-provider2'
          service_account: 'artifactregistry@elixir-337919.iam.gserviceaccount.com'

      - name: 'Docker configuration'
        run: |-
          echo ${{steps.auth.outputs.access_token}} | docker login -u oauth2accesstoken --password-stdin https://europe-north1-docker.pkg.dev

#      - name: 'Build image and Push'
#        run: |
#          docker build  -f docker/Dockerfile -t weber:latest .
#          docker tag weber:latest "europe-north1-docker.pkg.dev/elixir-337919/antimon-docker/weber:${GITHUB_SHA}"
#          docker push "europe-north1-docker.pkg.dev/elixir-337919/antimon-docker/weber:${GITHUB_SHA}"

      # Get the GKE credentials so we can deploy to the cluster
      - name: Set up GKE credentials
        uses: google-github-actions/get-gke-credentials@v0.4.0
        with:
          cluster_name: ${{ env.GKE_CLUSTER }}
          location: ${{ env.GKE_ZONE }}

      - name: Deploy
        run: |-
          k8/bin/ktmpl k8/deployment.yaml --parameter VERSION 1 | kubectl apply -f -
#          k8/bin/ktmpl k8/deployment.yaml --parameter VERSION ${GITHUB_SHA} | kubectl apply -f -
          kubectl apply -f k8/service.yaml
          kubectl apply -f k8/ingress.yaml

      - name: Wait for uptime
        run: |-
          scripts/wait_deployment.sh elixir 300 elixir